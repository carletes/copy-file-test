#!/usr/bin/env python3

import argparse
import logging
import os
import shutil
import stat
import sys
import tempfile


LOG = logging.getLogger()


def copy_file(src, dst):
    st_in = os.stat(src)
    size = st_in.st_size

    fd_out, tmp = tempfile.mkstemp(prefix=os.path.abspath(dst))
    LOG.debug("Created tmp file %s", tmp)

    try:
        if (
            stat.S_ISREG(st_in.st_mode)
            and size > 0
            and os.stat(tmp).st_dev == st_in.st_dev
        ):
            with open(src, "rb") as f_in:
                copy_file_range(f_in.fileno(), fd_out, size)
        else:
            try:
                os.close(fd_out)
            except Exception:
                pass
            fd_out = None
            copy_file_stdlib(src, tmp, size)

        shutil.copymode(src, tmp)

        LOG.debug("Renaming %s to %s", tmp, dst)
        os.rename(tmp, dst)
    except Exception:
        try:
            os.unlink(tmp)
        except Exception:
            pass
        raise
    finally:
        if fd_out is not None:
            try:
                os.close(fd_out)
            except Exception:
                pass


def copy_file_range(fd_in, fd_out, size):
    remaining = size
    while remaining > 0:
        written = os.copy_file_range(fd_in, fd_out, remaining)
        LOG.debug("copy_file_range(): Wrote %d byte(s)", written)
        remaining -= written


def copy_file_stdlib(src, dst, size):
    shutil.copyfile(src, dst)
    LOG.debug("copy_file_stdlib: Wrote %d byte(s)", size)


def main():
    p = argparse.ArgumentParser()
    p.add_argument("src")
    p.add_argument("dst")
    p.add_argument("--verbose", action="store_true")
    args = p.parse_args()

    logging.basicConfig(
        format="%(message)s",
        level=logging.DEBUG if args.verbose else logging.INFO,
        stream=sys.stderr,
    )

    return copy_file(args.src, args.dst)


if __name__ == "__main__":
    sys.exit(main())
